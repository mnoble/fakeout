h1. Fakeout

Fakeout is an easy way of testing the output of your command line tools and libraries.

It catches all output to @$stdout@ and @$stderr@ while activated so you can test the correct output is given by your library or script. It also has the nice side-effect of keeping your test results from being crapped up with non test result text and data.

h2. Usage

To load and activate Fakeout:

bc.. require "fakeout"

h3. Manually Activate and Deactivate

If you want to control when Fakeout starts and stops capturing output:

bc.. require "fakeout/safe"

Fakeout.activate!
# your code
Fakeout.deactivate!

p. Both of the approaches above work for RSpec, UnitTest, or whatever.

h2. Helpers

Including the @Fakeout::TestHelpers@ module into your spec or test class exposes two objects, @stdout@ and @stderr@, each containing any output sent, while Fakeout is activated, to @$stdout@ and @$stderr@, respectively.

bc.. it "should rawr to $stdout" do
  lion.rawr_to_stdout
  stdout.should include "RAWR!!"
end

h2. RSpec

@Fakeout::SpecHelpers@ will automatically activate before each example and deactivate after each one when included. It can be included into individual Example Groups:

bc.. describe "Something" do
  include Fakeout::SpecHelpers
end

p. or included into all Example Groups:

bc.. RSpec.config do |c|
  c.include Fakeout::SpecHelpers
end

p. * Note that if you use @SpecHelpers@ with RSpec, you DO NOT need to include @TestHelpers@.

h2. Test::Unit

bc.. class SomethingTest < Test::Unit::TestCase
  include Fakeout::TestHelpers
  
  def setup
    Fakeout.activate!
  end
  
  def teardown
    Fakeout.deactivate!
  end
end

h2. Installation

bc.. $ gem install fakeout

h2. Contribution

1. Fork Fakeout
2. Create a topic branch - @git checkout -b branch_name@
3. Push branch to your fork - @git push origin branch_name@
4. Send a pull request

h2. Thanks

Defunkt for FakeFS, which much of Fakeout is modeled after.